#*
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
*#
#set ( $package = "org.apache.maven.yaml" )
#set ( $className = "YamlReader" )
#MODELLO-VELOCITY#SAVE-OUTPUT-TO ${package.replace('.','/')}/${className}.java
// =================== DO NOT EDIT THIS FILE ====================
//  Generated by Modello Velocity from ${template}
//  template, any modifications will be overwritten.
// ==============================================================
package ${package};

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.LinkedHashMap;

import org.apache.maven.api.annotations.Generated;
import org.apache.maven.api.spi.ModelParserException;
#foreach ( $class in $model.allClasses )
import ${packageModelV4}.${class.name};
#end

@Generated
@SuppressWarnings("deprecation")
public class ${className} {

#foreach ( $class in $model.allClasses )
  #set ( $ancestors = $Helper.ancestors( $class ) )
  #set ( $allFields = [] )
  #foreach ( $cl in $ancestors )
    #set ( $dummy = $allFields.addAll( $cl.getFields($version) ) )
  #end
  #if ( $class.name != "InputSource" && $class.name != "InputLocation" )
    public ${class.name} parse${class.name}(Object value) {
        if (value instanceof String v) {
    #if ( $class.name == "Model" || $class.name == "Parent" || $class.name == "Extension" || $class.name == "Plugin" || $class.name == "ReportPlugin" )
            String[] gav = parseGavString(toString(v));
            ${class.name}.Builder ${Helper.uncapitalise($class.name)} = ${class.name}.newBuilder(true);
            ${Helper.uncapitalise($class.name)}.groupId(gav[0]);
            ${Helper.uncapitalise($class.name)}.artifactId(gav[1]);
            ${Helper.uncapitalise($class.name)}.version(gav[2]);
            return ${Helper.uncapitalise($class.name)}.build();
    #elseif ( $class.name == "Dependency" )
            String[] gav = parseGasvtcoString(toString(v));
            ${class.name}.Builder ${Helper.uncapitalise($class.name)} = ${class.name}.newBuilder(true);
            ${Helper.uncapitalise($class.name)}.groupId(gav[0]);
            ${Helper.uncapitalise($class.name)}.artifactId(gav[1]);
            ${Helper.uncapitalise($class.name)}.scope(gav[2]);
            ${Helper.uncapitalise($class.name)}.version(gav[3]);
            ${Helper.uncapitalise($class.name)}.type(gav[4]);
            ${Helper.uncapitalise($class.name)}.classifier(gav[5]);
            ${Helper.uncapitalise($class.name)}.optional(gav[6]);
            return ${Helper.uncapitalise($class.name)}.build();
    #else
            throw new ModelParserException("Unable to parse ${class.name} from String");
    #end
        }
        if (value instanceof Map) {
            Map<String, Object> map = (Map<String, Object>) value;
            ${class.name}.Builder ${Helper.uncapitalise($class.name)} = ${class.name}.newBuilder(true);
            
            map.forEach((k, v) -> {
                switch (k) {
    #if ( $class.name == "Model" || $class.name == "Parent" || $class.name == "Dependency" || $class.name == "Extension" || $class.name == "Plugin" || $class.name == "ReportPlugin" )
                    case "id": {
      #if ( $class.name != "Dependency" )
                        String[] gav = parseGavString(toString(v));
                        ${Helper.uncapitalise($class.name)}.groupId(gav[0]);
                        ${Helper.uncapitalise($class.name)}.artifactId(gav[1]);
                        ${Helper.uncapitalise($class.name)}.version(gav[2]);
      #else
                        String[] gav = parseGasvtcoString(toString(v));
                        ${Helper.uncapitalise($class.name)}.groupId(gav[0]);
                        ${Helper.uncapitalise($class.name)}.artifactId(gav[1]);
                        ${Helper.uncapitalise($class.name)}.scope(gav[2]);
                        ${Helper.uncapitalise($class.name)}.version(gav[3]);
                        ${Helper.uncapitalise($class.name)}.type(gav[4]);
                        ${Helper.uncapitalise($class.name)}.classifier(gav[5]);
                        ${Helper.uncapitalise($class.name)}.optional(gav[6]);
      #end
                        break;
                    }
    #end
    #foreach ( $field in $allFields )
      #if ( ! $Helper.xmlFieldMetadata( $field ).transient && $field.name != "root" )
        #set ( $fieldTagName = $Helper.xmlFieldMetadata( $field ).tagName )
        #if ( ! $fieldTagName )
          #set ( $fieldTagName = $field.name )
        #end
        #if ( $Helper.isFlatItems( $field ) )
          #set ( $fieldTagName = $Helper.singular( $fieldTagName ) )
        #end
                    case "${fieldTagName}": {
        #if ( $field.type == "String" )
                        ${Helper.uncapitalise($class.name)}.${field.name}(toString(v));
                        break;
        #elseif ( $field.type == "boolean" || $field.type == "Boolean" )
                        ${Helper.uncapitalise($class.name)}.${field.name}(toBoolean(v));
                        break;
        #elseif ( $field.type == "int" )
                        ${Helper.uncapitalise($class.name)}.${field.name}(toInteger(v));
                        break;
        #elseif ( $field.type == "java.util.List" && $field.to == "String" && $field.multiplicity == "*" )
                        ${Helper.uncapitalise($class.name)}.${field.name}(toStringList(v));
                        break;
        #elseif ( $field.type == "java.util.Properties" && $field.to == "String" && $field.multiplicity == "*" )
                        ${Helper.uncapitalise($class.name)}.${field.name}(toStringMap(v));
                        break;
        #elseif ( $field.to && $field.multiplicity == "1" )
                        ${Helper.uncapitalise($class.name)}.${field.name}(parse${field.toClass.name}(v));
                        break;
        #elseif ( $field.to && $field.multiplicity == "*" )
                        ${Helper.uncapitalise($class.name)}.${field.name}(toList(v, this::parse${field.toClass.name}));
                        break;
        #elseif ( $field.type == "DOM" )
                        if (v instanceof Map) {
                            ${Helper.uncapitalise($class.name)}.${field.name}(mapToXmlNode("configuration", (Map<?, ?>) v));
                        } else {
                            throw new ModelParserException("Unable to parse configuration from '" + v + "'");
                        }
                        break;
        #else
                        // unsupported: ${field.type}
                        break;
        #end
                    }
      #end
    #end
                }
            });
            return ${Helper.uncapitalise($class.name)}.build();
        }
        return null;
    }
  #end

#end

    protected String[] parseGavString(String str) {
        if (str == null) {
            throw new ModelParserException("GAV string cannot be null");
        }
        String[] parts = str.split(":");
        if (parts.length < 2 || parts.length > 3) {
            throw new ModelParserException("GAV string must have 2 or 3 parts (groupId:artifactId[:version]), found " + parts.length + " parts in '" + str + "'");
        }
        
        String[] result = new String[3]; // [groupId, artifactId, version]
        result[0] = parts[0].isEmpty() ? null : parts[0];  // groupId
        result[1] = parts[1].isEmpty() ? null : parts[1];  // artifactId
        
        if (result[0] == null || result[1] == null) {
            throw new ModelParserException("GroupId and artifactId cannot be empty in GAV string '" + str + "'");
        }
        
        if (parts.length == 3) {
            result[2] = parts[2].isEmpty() ? null : parts[2];  // version
        }
        
        return result;
    }

    // Known scopes
    Set<String> KNOWN_SCOPES = Set.of(
        "compile-only", "compile", "runtime", "provided",
        "test-only", "test", "test-runtime", "system"
    );

    protected String[] parseGasvtcoString(String str) {
        if (str == null) {
            throw new ModelParserException("GASVTC string cannot be null");
        }

        // Handle optional marker
        boolean optional = str.endsWith("?");
        if (optional) {
            str = str.substring(0, str.length() - 1);
        }

        String[] parts = str.split(":");
        if (parts.length < 2 || parts.length > 6) {
            throw new ModelParserException("GASVTC string must have between 2 and 6 parts (groupId:artifactId[:scope][:version][:type][:classifier]), found " + parts.length + " parts in '" + str + "'");
        }

        String[] result = new String[7]; // [groupId, artifactId, scope, version, type, classifier, optional]
        
        // Required parts
        result[0] = parts[0].isEmpty() ? null : parts[0];  // groupId
        result[1] = parts[1].isEmpty() ? null : parts[1];  // artifactId
        
        if (result[0] == null || result[1] == null) {
            throw new ModelParserException("GroupId and artifactId cannot be empty in GASVTC string '" + str + "'");
        }

        // Process remaining parts
        for (int i = 2; i < parts.length; i++) {
            String part = parts[i].isEmpty() ? null : parts[i];
            
            // If it's the third part, check if it's a scope
            if (i == 2 && part != null && KNOWN_SCOPES.contains(part)) {
                result[2] = part;  // scope
            } else if (result[2] != null) {
                // If we have a scope, shift everything one position
                if (i == 3) result[3] = part;      // version
                else if (i == 4) result[4] = part; // type
                else if (i == 5) result[5] = part; // classifier
            } else {
                // No scope was found, use normal ordering
                if (i == 2) result[3] = part;      // version
                else if (i == 3) result[4] = part; // type
                else if (i == 4) result[5] = part; // classifier
            }
        }

        // Set optional flag
        result[6] = optional ? "true" : null;

        return result;
    }

    protected String toString(Object v) {
        return v != null ? v.toString() : null;
    }

    protected org.apache.maven.internal.xml.XmlNodeImpl mapToXmlNode(String name, Map<?, ?> map) {
        List<org.apache.maven.api.xml.XmlNode> children = new ArrayList<>();
        map.forEach((k, v) -> {
            if (v instanceof Map) {
                children.add(mapToXmlNode(k.toString(), (Map<?, ?>) v));
            } else if (v instanceof List) {
                ((List<?>) v).forEach(item -> {
                    if (item instanceof Map) {
                        children.add(mapToXmlNode(k.toString(), (Map<?, ?>) item));
                    } else {
                        children.add(new org.apache.maven.internal.xml.XmlNodeImpl(k.toString(), toString(item), null, Collections.emptyList(), null));
                    }
                });
            } else {
                children.add(new org.apache.maven.internal.xml.XmlNodeImpl(k.toString(), toString(v), null, Collections.emptyList(), null));
            }
        });
        return new org.apache.maven.internal.xml.XmlNodeImpl(name, null, null, children, null);
    }

    protected List<String> toStringList(Object v) {
        if (v instanceof List) {
            return ((List<?>) v).stream()
                .map(Object::toString)
                .collect(Collectors.toList());
        }
        throw new IllegalArgumentException("Unable to convert to List<String>: '" + v + "'");
    }

    protected Map<String, String> toStringMap(Object v) {
        if (v == null) {
            return Collections.emptyMap();
        }
        if (v instanceof Map<?, ?> map) {
            Map<String, String> result = new LinkedHashMap<>();
            map.forEach((key, value) -> result.put(toString(key), toString(value)));
            return result;
        }
        throw new ModelParserException("Unable to parse Map from " + v.getClass());
    }

    protected boolean toBoolean(Object v) {
        return Boolean.parseBoolean(toString(v));
    }

    protected int toInteger(Object v) {
        return Integer.parseInt(toString(v));
    }

    protected <T> List<T> toList(Object v, Function<Object, T> parser) {
        if (v instanceof List) {
            return ((List<?>) v).stream()
                .map(parser)
                .collect(Collectors.toList());
        }
        throw new IllegalArgumentException("Unable to convert to List: '" + v + "'");
    }
}
